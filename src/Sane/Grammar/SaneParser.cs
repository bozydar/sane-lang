//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/bozydar/workspaces/sane/src/Sane/Sane.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Sane.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SaneParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ID=10, ASTERISK=11, SLASH=12, PLUS=13, MINUS=14, NUMBER=15, WHITESPACE=16, 
		SingleLineComment=17;
	public const int
		RULE_program = 0, RULE_module = 1, RULE_let = 2, RULE_parameter = 3, RULE_expression = 4, 
		RULE_declaration = 5, RULE_type = 6;
	public static readonly string[] ruleNames = {
		"program", "module", "let", "parameter", "expression", "declaration", 
		"type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'module'", "'end'", "'let'", "'='", "'('", "')'", "'->'", "':'", 
		"','", null, "'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "ID", "ASTERISK", 
		"SLASH", "PLUS", "MINUS", "NUMBER", "WHITESPACE", "SingleLineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sane.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SaneParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SaneParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SaneParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SaneParser.Eof, 0); }
		public ModuleContext[] module() {
			return GetRuleContexts<ModuleContext>();
		}
		public ModuleContext module(int i) {
			return GetRuleContext<ModuleContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 14; module();
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			State = 19; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public IToken moduleName;
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public LetContext[] let() {
			return GetRuleContexts<LetContext>();
		}
		public LetContext let(int i) {
			return GetRuleContext<LetContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; Match(T__0);
			State = 22; _localctx.moduleName = Match(ID);
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2 || _la==ID) {
				{
				State = 25;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 23; declaration();
					}
					break;
				case T__2:
					{
					State = 24; let();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 30; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public IToken bindingName;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 4, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(T__2);
			State = 33; _localctx.bindingName = Match(ID);
			State = 34; Match(T__3);
			State = 35; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 6, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallContext : ExpressionContext {
		public IToken funcName;
		public ExpressionContext expressions;
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericAtomExpContext : ExpressionContext {
		public IToken value;
		public ITerminalNode NUMBER() { return GetToken(SaneParser.NUMBER, 0); }
		public NumericAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterNumericAtomExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitNumericAtomExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivExpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken operation;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASTERISK() { return GetToken(SaneParser.ASTERISK, 0); }
		public ITerminalNode SLASH() { return GetToken(SaneParser.SLASH, 0); }
		public MulDivExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterMulDivExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitMulDivExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionContext : ExpressionContext {
		public ParameterContext parameters;
		public ExpressionContext body;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public FunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterParenthesisExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitParenthesisExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomExpContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public IdAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterIdAtomExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitIdAtomExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken operation;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(SaneParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SaneParser.MINUS, 0); }
		public AddSubExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterAddSubExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitAddSubExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 40; Match(T__4);
				State = 41; expression(0);
				State = 42; Match(T__5);
				}
				break;
			case 2:
				{
				_localctx = new CallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 44; ((CallContext)_localctx).funcName = Match(ID);
				State = 45; Match(T__4);
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << ID) | (1L << NUMBER))) != 0)) {
					{
					{
					State = 46; ((CallContext)_localctx).expressions = expression(0);
					}
					}
					State = 51;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 52; Match(T__5);
				}
				break;
			case 3:
				{
				_localctx = new FunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 53; Match(T__4);
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 54; ((FunctionContext)_localctx).parameters = parameter();
					}
					}
					State = 59;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 60; Match(T__5);
				State = 61; Match(T__6);
				State = 62; ((FunctionContext)_localctx).body = expression(3);
				}
				break;
			case 4:
				{
				_localctx = new NumericAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 63; ((NumericAtomExpContext)_localctx).value = Match(NUMBER);
				}
				break;
			case 5:
				{
				_localctx = new IdAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 64; Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 75;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 73;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new MulDivExpContext(new ExpressionContext(_parentctx, _parentState));
						((MulDivExpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 67;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 68;
						((MulDivExpContext)_localctx).operation = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ASTERISK || _la==SLASH) ) {
							((MulDivExpContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 69; ((MulDivExpContext)_localctx).right = expression(7);
						}
						break;
					case 2:
						{
						_localctx = new AddSubExpContext(new ExpressionContext(_parentctx, _parentState));
						((AddSubExpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 70;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 71;
						((AddSubExpContext)_localctx).operation = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddSubExpContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 72; ((AddSubExpContext)_localctx).right = expression(6);
						}
						break;
					}
					} 
				}
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(ID);
			State = 79; Match(T__7);
			State = 80; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommaTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public CommaTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterCommaType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitCommaType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurryTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public CurryTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterCurryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitCurryType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurryType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ParenthesisTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterParenthesisType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitParenthesisType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public IdAtomTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterIdAtomType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitIdAtomType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtomType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				_localctx = new ParenthesisTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 83; Match(T__4);
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 84; type(0);
					}
					}
					State = 87;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__4 || _la==ID );
				State = 89; Match(T__5);
				}
				break;
			case ID:
				{
				_localctx = new IdAtomTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 102;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 100;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new CommaTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 94;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 95; Match(T__8);
						State = 96; type(4);
						}
						break;
					case 2:
						{
						_localctx = new CurryTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 97;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 98; Match(T__6);
						State = 99; type(3);
						}
						break;
					}
					} 
				}
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 6: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', 'l', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x6', '\x2', '\x12', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x1C', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x1F', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x32', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x35', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', ':', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '=', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x44', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', 'L', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'O', 
		'\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x6', '\b', 'X', '\n', '\b', '\r', '\b', 
		'\xE', '\b', 'Y', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'_', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', 'g', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'j', '\v', '\b', '\x3', '\b', '\x2', '\x4', '\n', '\xE', '\t', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x2', '\x4', '\x3', '\x2', '\r', 
		'\xE', '\x3', '\x2', '\xF', '\x10', '\x2', 's', '\x2', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x17', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\"', '\x3', '\x2', '\x2', '\x2', '\b', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x43', '\x3', '\x2', '\x2', '\x2', '\f', 'P', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '^', '\x3', '\x2', '\x2', '\x2', '\x10', '\x12', '\x5', 
		'\x4', '\x3', '\x2', '\x11', '\x10', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x16', '\a', '\x2', '\x2', '\x3', '\x16', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\a', '\x3', '\x2', 
		'\x2', '\x18', '\x1D', '\a', '\f', '\x2', '\x2', '\x19', '\x1C', '\x5', 
		'\f', '\a', '\x2', '\x1A', '\x1C', '\x5', '\x6', '\x4', '\x2', '\x1B', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', ' ', '!', '\a', '\x4', '\x2', '\x2', '!', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\a', '\x5', '\x2', '\x2', '#', '$', '\a', '\f', 
		'\x2', '\x2', '$', '%', '\a', '\x6', '\x2', '\x2', '%', '&', '\x5', '\n', 
		'\x6', '\x2', '&', '\a', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', 
		'\f', '\x2', '\x2', '(', '\t', '\x3', '\x2', '\x2', '\x2', ')', '*', '\b', 
		'\x6', '\x1', '\x2', '*', '+', '\a', '\a', '\x2', '\x2', '+', ',', '\x5', 
		'\n', '\x6', '\x2', ',', '-', '\a', '\b', '\x2', '\x2', '-', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\a', '\f', '\x2', '\x2', '/', '\x33', 
		'\a', '\a', '\x2', '\x2', '\x30', '\x32', '\x5', '\n', '\x6', '\x2', '\x31', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x44', '\a', '\b', '\x2', 
		'\x2', '\x37', ';', '\a', '\a', '\x2', '\x2', '\x38', ':', '\x5', '\b', 
		'\x5', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', 
		'\x3', '\x2', '\x2', '\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', '=', 
		';', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\b', '\x2', '\x2', '?', 
		'@', '\a', '\t', '\x2', '\x2', '@', '\x44', '\x5', '\n', '\x6', '\x5', 
		'\x41', '\x44', '\a', '\x11', '\x2', '\x2', '\x42', '\x44', '\a', '\f', 
		'\x2', '\x2', '\x43', ')', '\x3', '\x2', '\x2', '\x2', '\x43', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x37', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x44', 'M', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\f', 
		'\b', '\x2', '\x2', '\x46', 'G', '\t', '\x2', '\x2', '\x2', 'G', 'L', 
		'\x5', '\n', '\x6', '\t', 'H', 'I', '\f', '\a', '\x2', '\x2', 'I', 'J', 
		'\t', '\x3', '\x2', '\x2', 'J', 'L', '\x5', '\n', '\x6', '\b', 'K', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'H', '\x3', '\x2', '\x2', '\x2', 'L', 
		'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\f', '\x2', 
		'\x2', 'Q', 'R', '\a', '\n', '\x2', '\x2', 'R', 'S', '\x5', '\xE', '\b', 
		'\x2', 'S', '\r', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\b', '\b', '\x1', 
		'\x2', 'U', 'W', '\a', '\a', '\x2', '\x2', 'V', 'X', '\x5', '\xE', '\b', 
		'\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '\b', '\x2', 
		'\x2', '\\', '_', '\x3', '\x2', '\x2', '\x2', ']', '_', '\a', '\f', '\x2', 
		'\x2', '^', 'T', '\x3', '\x2', '\x2', '\x2', '^', ']', '\x3', '\x2', '\x2', 
		'\x2', '_', 'h', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\f', '\x5', 
		'\x2', '\x2', '\x61', '\x62', '\a', '\v', '\x2', '\x2', '\x62', 'g', '\x5', 
		'\xE', '\b', '\x6', '\x63', '\x64', '\f', '\x4', '\x2', '\x2', '\x64', 
		'\x65', '\a', '\t', '\x2', '\x2', '\x65', 'g', '\x5', '\xE', '\b', '\x5', 
		'\x66', '`', '\x3', '\x2', '\x2', '\x2', '\x66', '\x63', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x13', '\x1B', '\x1D', '\x33', ';', '\x43', 'K', 'M', 'Y', '^', '\x66', 
		'h',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Sane.Grammar
