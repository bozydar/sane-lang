//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/bozydar/workspaces/sane/src/Sane/Sane.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Sane.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SaneParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, ID=28, ASTERISK=29, SLASH=30, PLUS=31, MINUS=32, 
		NUMBER=33, WHITESPACE=34, SingleLineComment=35, ESCAPED_STRING=36, DoubleString=37, 
		TemplateStringLiteral=38;
	public const int
		RULE_module = 0, RULE_let = 1, RULE_parameter = 2, RULE_expression = 3, 
		RULE_declaration = 4, RULE_type = 5;
	public static readonly string[] ruleNames = {
		"module", "let", "parameter", "expression", "declaration", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'module'", "'end'", "'='", "'('", "')'", "'['", "']'", "'let'", 
		"'in'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'!'", "'&&'", "'||'", 
		"'|>'", "'<|'", "'>>'", "'<<'", "'{'", "'}'", "'->'", "':'", "','", null, 
		"'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "ID", "ASTERISK", "SLASH", "PLUS", "MINUS", "NUMBER", 
		"WHITESPACE", "SingleLineComment", "ESCAPED_STRING", "DoubleString", "TemplateStringLiteral"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sane.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SaneParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SaneParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SaneParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ModuleContext : ParserRuleContext {
		public IToken moduleName;
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public LetContext[] let() {
			return GetRuleContexts<LetContext>();
		}
		public LetContext let(int i) {
			return GetRuleContext<LetContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; Match(T__0);
			State = 13; _localctx.moduleName = Match(ID);
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				State = 16;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 14; declaration();
					}
					break;
				case 2:
					{
					State = 15; let();
					}
					break;
				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 21; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public IToken bindingName;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 2, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23; _localctx.bindingName = Match(ID);
			State = 24; Match(T__2);
			State = 25; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 4, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PipeExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PipeExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterPipeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitPipeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericAtomExpContext : ExpressionContext {
		public IToken value;
		public ITerminalNode NUMBER() { return GetToken(SaneParser.NUMBER, 0); }
		public NumericAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterNumericAtomExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitNumericAtomExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivExpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken operation;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASTERISK() { return GetToken(SaneParser.ASTERISK, 0); }
		public ITerminalNode SLASH() { return GetToken(SaneParser.SLASH, 0); }
		public MulDivExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterMulDivExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitMulDivExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeftPlusMinusContext : ExpressionContext {
		public ExpressionContext right;
		public ITerminalNode PLUS() { return GetToken(SaneParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SaneParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LeftPlusMinusContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterLeftPlusMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitLeftPlusMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayExpContext : ExpressionContext {
		public ExpressionContext expressions;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterArrayExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitArrayExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExternalNodeContext : ExpressionContext {
		public IToken body;
		public ITerminalNode TemplateStringLiteral() { return GetToken(SaneParser.TemplateStringLiteral, 0); }
		public ExternalNodeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterExternalNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitExternalNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalNode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomExpContext : ExpressionContext {
		public IToken id;
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public IdAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterIdAtomExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitIdAtomExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken operation;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(SaneParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SaneParser.MINUS, 0); }
		public AddSubExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterAddSubExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitAddSubExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken operation;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterCompareExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitCompareExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallContext : ExpressionContext {
		public ExpressionContext callable;
		public ExpressionContext arguments;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : ExpressionContext {
		public ExpressionContext right;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomExpContext : ExpressionContext {
		public IToken value;
		public ITerminalNode ESCAPED_STRING() { return GetToken(SaneParser.ESCAPED_STRING, 0); }
		public StringAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterStringAtomExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitStringAtomExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComposeExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComposeExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterComposeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitComposeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionContext : ExpressionContext {
		public ParameterContext parameters;
		public ExpressionContext body;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public FunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : ExpressionContext {
		public ExpressionContext body;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterParenthesisExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitParenthesisExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetsInExpContext : ExpressionContext {
		public LetContext lets;
		public ExpressionContext body;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetContext[] let() {
			return GetRuleContexts<LetContext>();
		}
		public LetContext let(int i) {
			return GetRuleContext<LetContext>(i);
		}
		public LetsInExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterLetsInExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitLetsInExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetsInExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				_localctx = new ExternalNodeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 30; ((ExternalNodeContext)_localctx).body = Match(TemplateStringLiteral);
				}
				break;
			case 2:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 31; Match(T__3);
				State = 32; ((ParenthesisExpContext)_localctx).body = expression(0);
				State = 33; Match(T__4);
				}
				break;
			case 3:
				{
				_localctx = new ArrayExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 35; Match(T__5);
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__5) | (1L << T__7) | (1L << T__15) | (1L << ID) | (1L << PLUS) | (1L << MINUS) | (1L << NUMBER) | (1L << ESCAPED_STRING) | (1L << TemplateStringLiteral))) != 0)) {
					{
					{
					State = 36; ((ArrayExpContext)_localctx).expressions = expression(0);
					}
					}
					State = 41;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 42; Match(T__6);
				}
				break;
			case 4:
				{
				_localctx = new LetsInExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 43; Match(T__7);
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 44; ((LetsInExpContext)_localctx).lets = let();
					}
					}
					State = 49;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 50; Match(T__8);
				State = 51; ((LetsInExpContext)_localctx).body = expression(0);
				State = 52; Match(T__1);
				}
				break;
			case 5:
				{
				_localctx = new LeftPlusMinusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 54;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 55; ((LeftPlusMinusContext)_localctx).right = expression(14);
				}
				break;
			case 6:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 56; Match(T__15);
				State = 57; ((NotExprContext)_localctx).right = expression(10);
				}
				break;
			case 7:
				{
				_localctx = new FunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 58; Match(T__3);
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 59; ((FunctionContext)_localctx).parameters = parameter();
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 65; Match(T__4);
				State = 66; Match(T__24);
				State = 67; ((FunctionContext)_localctx).body = expression(4);
				}
				break;
			case 8:
				{
				_localctx = new NumericAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 68; ((NumericAtomExpContext)_localctx).value = Match(NUMBER);
				}
				break;
			case 9:
				{
				_localctx = new StringAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 69; ((StringAtomExpContext)_localctx).value = Match(ESCAPED_STRING);
				}
				break;
			case 10:
				{
				_localctx = new IdAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 70; ((IdAtomExpContext)_localctx).id = Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 103;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new MulDivExpContext(new ExpressionContext(_parentctx, _parentState));
						((MulDivExpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 73;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 74;
						((MulDivExpContext)_localctx).operation = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ASTERISK || _la==SLASH) ) {
							((MulDivExpContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 75; ((MulDivExpContext)_localctx).right = expression(14);
						}
						break;
					case 2:
						{
						_localctx = new AddSubExpContext(new ExpressionContext(_parentctx, _parentState));
						((AddSubExpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 76;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 77;
						((AddSubExpContext)_localctx).operation = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddSubExpContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 78; ((AddSubExpContext)_localctx).right = expression(13);
						}
						break;
					case 3:
						{
						_localctx = new CompareExpContext(new ExpressionContext(_parentctx, _parentState));
						((CompareExpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 79;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 80;
						((CompareExpContext)_localctx).operation = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
							((CompareExpContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 81; ((CompareExpContext)_localctx).right = expression(12);
						}
						break;
					case 4:
						{
						_localctx = new AndExprContext(new ExpressionContext(_parentctx, _parentState));
						((AndExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 82;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 83; Match(T__16);
						State = 84; ((AndExprContext)_localctx).right = expression(10);
						}
						break;
					case 5:
						{
						_localctx = new OrExprContext(new ExpressionContext(_parentctx, _parentState));
						((OrExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 85;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 86; Match(T__17);
						State = 87; ((OrExprContext)_localctx).right = expression(9);
						}
						break;
					case 6:
						{
						_localctx = new PipeExprContext(new ExpressionContext(_parentctx, _parentState));
						((PipeExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 88;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 89;
						_la = TokenStream.LA(1);
						if ( !(_la==T__18 || _la==T__19) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 90; ((PipeExprContext)_localctx).right = expression(8);
						}
						break;
					case 7:
						{
						_localctx = new ComposeExprContext(new ExpressionContext(_parentctx, _parentState));
						((ComposeExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 91;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 92;
						_la = TokenStream.LA(1);
						if ( !(_la==T__20 || _la==T__21) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 93; ((ComposeExprContext)_localctx).right = expression(7);
						}
						break;
					case 8:
						{
						_localctx = new CallContext(new ExpressionContext(_parentctx, _parentState));
						((CallContext)_localctx).callable = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 94;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 95; Match(T__22);
						State = 99;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__5) | (1L << T__7) | (1L << T__15) | (1L << ID) | (1L << PLUS) | (1L << MINUS) | (1L << NUMBER) | (1L << ESCAPED_STRING) | (1L << TemplateStringLiteral))) != 0)) {
							{
							{
							State = 96; ((CallContext)_localctx).arguments = expression(0);
							}
							}
							State = 101;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 102; Match(T__23);
						}
						break;
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(ID);
			State = 109; Match(T__25);
			State = 110; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommaTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public CommaTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterCommaType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitCommaType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurryTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public CurryTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterCurryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitCurryType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurryType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ParenthesisTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterParenthesisType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitParenthesisType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(SaneParser.ID, 0); }
		public IdAtomTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.EnterIdAtomType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISaneListener typedListener = listener as ISaneListener;
			if (typedListener != null) typedListener.ExitIdAtomType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISaneVisitor<TResult> typedVisitor = visitor as ISaneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtomType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				{
				_localctx = new ParenthesisTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 113; Match(T__3);
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 114; type(0);
					}
					}
					State = 117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__3 || _la==ID );
				State = 119; Match(T__4);
				}
				break;
			case ID:
				{
				_localctx = new IdAtomTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 130;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new CommaTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 124;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 125; Match(T__26);
						State = 126; type(4);
						}
						break;
					case 2:
						{
						_localctx = new CurryTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 127;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 128; Match(T__24);
						State = 129; type(3);
						}
						break;
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 5: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '(', '\x8A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x13', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\x16', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '(', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', '+', '\v', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', '\x30', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', '\x33', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '?', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '\x42', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'J', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'\x64', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'g', '\v', '\x5', '\x3', 
		'\x5', '\a', '\x5', 'j', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'm', 
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', 'v', '\n', '\a', '\r', '\a', 
		'\xE', '\a', 'w', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'}', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\x85', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\x88', '\v', '\a', '\x3', '\a', '\x2', '\x4', '\b', '\f', '\b', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\a', '\x3', '\x2', '!', 
		'\"', '\x3', '\x2', '\x1F', ' ', '\x3', '\x2', '\f', '\x11', '\x3', '\x2', 
		'\x15', '\x16', '\x3', '\x2', '\x17', '\x18', '\x2', '\x9E', '\x2', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x1D', '\x3', '\x2', '\x2', '\x2', '\b', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'n', '\x3', '\x2', '\x2', '\x2', '\f', '|', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xF', '\a', '\x3', '\x2', '\x2', '\xF', '\x14', 
		'\a', '\x1E', '\x2', '\x2', '\x10', '\x13', '\x5', '\n', '\x6', '\x2', 
		'\x11', '\x13', '\x5', '\x4', '\x3', '\x2', '\x12', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x11', '\x3', '\x2', '\x2', '\x2', '\x13', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x15', '\x3', '\x2', '\x2', '\x2', '\x15', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x14', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', 
		'\a', '\x4', '\x2', '\x2', '\x18', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x1A', '\a', '\x1E', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x5', 
		'\x2', '\x2', '\x1B', '\x1C', '\x5', '\b', '\x5', '\x2', '\x1C', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x1E', '\x2', '\x2', 
		'\x1E', '\a', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\b', '\x5', '\x1', 
		'\x2', ' ', 'J', '\a', '(', '\x2', '\x2', '!', '\"', '\a', '\x6', '\x2', 
		'\x2', '\"', '#', '\x5', '\b', '\x5', '\x2', '#', '$', '\a', '\a', '\x2', 
		'\x2', '$', 'J', '\x3', '\x2', '\x2', '\x2', '%', ')', '\a', '\b', '\x2', 
		'\x2', '&', '(', '\x5', '\b', '\x5', '\x2', '\'', '&', '\x3', '\x2', '\x2', 
		'\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', ',', '\x3', '\x2', 
		'\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', ',', 'J', '\a', '\t', 
		'\x2', '\x2', '-', '\x31', '\a', '\n', '\x2', '\x2', '.', '\x30', '\x5', 
		'\x4', '\x3', '\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', 
		'\v', '\x2', '\x2', '\x35', '\x36', '\x5', '\b', '\x5', '\x2', '\x36', 
		'\x37', '\a', '\x4', '\x2', '\x2', '\x37', 'J', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x39', '\t', '\x2', '\x2', '\x2', '\x39', 'J', '\x5', '\b', '\x5', 
		'\x10', ':', ';', '\a', '\x12', '\x2', '\x2', ';', 'J', '\x5', '\b', '\x5', 
		'\f', '<', '@', '\a', '\x6', '\x2', '\x2', '=', '?', '\x5', '\x6', '\x4', 
		'\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x43', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\a', '\x2', '\x2', 
		'\x44', '\x45', '\a', '\x1B', '\x2', '\x2', '\x45', 'J', '\x5', '\b', 
		'\x5', '\x6', '\x46', 'J', '\a', '#', '\x2', '\x2', 'G', 'J', '\a', '&', 
		'\x2', '\x2', 'H', 'J', '\a', '\x1E', '\x2', '\x2', 'I', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', 'I', '!', '\x3', '\x2', '\x2', '\x2', 'I', '%', '\x3', 
		'\x2', '\x2', '\x2', 'I', '-', '\x3', '\x2', '\x2', '\x2', 'I', '\x38', 
		'\x3', '\x2', '\x2', '\x2', 'I', ':', '\x3', '\x2', '\x2', '\x2', 'I', 
		'<', '\x3', '\x2', '\x2', '\x2', 'I', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'k', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\f', '\xF', '\x2', '\x2', 
		'L', 'M', '\t', '\x3', '\x2', '\x2', 'M', 'j', '\x5', '\b', '\x5', '\x10', 
		'N', 'O', '\f', '\xE', '\x2', '\x2', 'O', 'P', '\t', '\x2', '\x2', '\x2', 
		'P', 'j', '\x5', '\b', '\x5', '\xF', 'Q', 'R', '\f', '\r', '\x2', '\x2', 
		'R', 'S', '\t', '\x4', '\x2', '\x2', 'S', 'j', '\x5', '\b', '\x5', '\xE', 
		'T', 'U', '\f', '\v', '\x2', '\x2', 'U', 'V', '\a', '\x13', '\x2', '\x2', 
		'V', 'j', '\x5', '\b', '\x5', '\f', 'W', 'X', '\f', '\n', '\x2', '\x2', 
		'X', 'Y', '\a', '\x14', '\x2', '\x2', 'Y', 'j', '\x5', '\b', '\x5', '\v', 
		'Z', '[', '\f', '\t', '\x2', '\x2', '[', '\\', '\t', '\x5', '\x2', '\x2', 
		'\\', 'j', '\x5', '\b', '\x5', '\n', ']', '^', '\f', '\b', '\x2', '\x2', 
		'^', '_', '\t', '\x6', '\x2', '\x2', '_', 'j', '\x5', '\b', '\x5', '\t', 
		'`', '\x61', '\f', '\a', '\x2', '\x2', '\x61', '\x65', '\a', '\x19', '\x2', 
		'\x2', '\x62', '\x64', '\x5', '\b', '\x5', '\x2', '\x63', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'j', '\a', '\x1A', '\x2', '\x2', 'i', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'N', '\x3', '\x2', '\x2', '\x2', 'i', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'T', '\x3', '\x2', '\x2', '\x2', 'i', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'Z', '\x3', '\x2', '\x2', '\x2', 'i', ']', '\x3', '\x2', 
		'\x2', '\x2', 'i', '`', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\t', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\a', '\x1E', '\x2', '\x2', 'o', 'p', '\a', 
		'\x1C', '\x2', '\x2', 'p', 'q', '\x5', '\f', '\a', '\x2', 'q', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\b', '\a', '\x1', '\x2', 's', 'u', '\a', 
		'\x6', '\x2', '\x2', 't', 'v', '\x5', '\f', '\a', '\x2', 'u', 't', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'z', '\a', '\a', '\x2', '\x2', 'z', '}', '\x3', 
		'\x2', '\x2', '\x2', '{', '}', '\a', '\x1E', '\x2', '\x2', '|', 'r', '\x3', 
		'\x2', '\x2', '\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\f', '\x5', '\x2', '\x2', '\x7F', 
		'\x80', '\a', '\x1D', '\x2', '\x2', '\x80', '\x85', '\x5', '\f', '\a', 
		'\x6', '\x81', '\x82', '\f', '\x4', '\x2', '\x2', '\x82', '\x83', '\a', 
		'\x1B', '\x2', '\x2', '\x83', '\x85', '\x5', '\f', '\a', '\x5', '\x84', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x84', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x88', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x12', '\x14', ')', '\x31', '@', 'I', '\x65', 'i', 'k', 
		'w', '|', '\x84', '\x86',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Sane.Grammar
