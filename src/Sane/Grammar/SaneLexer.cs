//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/bozydar/workspaces/sane/src/Sane/Sane.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Sane.Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SaneLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ID=10, ASTERISK=11, SLASH=12, PLUS=13, MINUS=14, NUMBER=15, WHITESPACE=16, 
		SingleLineComment=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"ID", "ASTERISK", "SLASH", "PLUS", "MINUS", "NUMBER", "WHITESPACE", "SingleLineComment", 
		"LETTER", "DIGIT"
	};


	public SaneLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SaneLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'module'", "'end'", "'let'", "'='", "'('", "')'", "':'", "','", 
		"'->'", null, "'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "ID", "ASTERISK", 
		"SLASH", "PLUS", "MINUS", "NUMBER", "WHITESPACE", "SingleLineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sane.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SaneLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x13', '\x81', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x6', '\v', 'G', '\n', '\v', '\r', '\v', '\xE', '\v', 'H', '\x3', 
		'\v', '\a', '\v', 'L', '\n', '\v', '\f', '\v', '\xE', '\v', 'O', '\v', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x6', '\x10', 
		'Z', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '[', '\x3', '\x10', '\x3', 
		'\x10', '\x6', '\x10', '`', '\n', '\x10', '\r', '\x10', '\xE', '\x10', 
		'\x61', '\x5', '\x10', '\x64', '\n', '\x10', '\x3', '\x11', '\x6', '\x11', 
		'g', '\n', '\x11', '\r', '\x11', '\xE', '\x11', 'h', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', 'q', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 't', '\v', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x6', '\x13', 'y', '\n', 
		'\x13', '\r', '\x13', '\xE', '\x13', 'z', '\x3', '\x14', '\x6', '\x14', 
		'~', '\n', '\x14', '\r', '\x14', '\xE', '\x14', '\x7F', '\x2', '\x2', 
		'\x15', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', 
		'\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', 
		'\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', 
		'\x12', '#', '\x13', '%', '\x2', '\'', '\x2', '\x3', '\x2', '\x6', '\x5', 
		'\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x5', '\x2', '\f', '\f', 
		'\xF', '\xF', '\x202A', '\x202B', '\x4', '\x2', '\x43', '\\', '\x63', 
		'|', '\x3', '\x2', '\x32', ';', '\x2', '\x87', '\x2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', 
		'\x3', '\x2', '\x2', '\x2', '\x3', ')', '\x3', '\x2', '\x2', '\x2', '\x5', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\a', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\t', '\x38', '\x3', '\x2', '\x2', '\x2', '\v', ':', '\x3', '\x2', 
		'\x2', '\x2', '\r', '<', '\x3', '\x2', '\x2', '\x2', '\xF', '>', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '@', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x15', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x17', 'P', '\x3', '\x2', '\x2', '\x2', '\x19', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', 'T', '\x3', '\x2', '\x2', '\x2', '\x1D', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', 'Y', '\x3', '\x2', '\x2', '\x2', '!', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '#', 'l', '\x3', '\x2', '\x2', '\x2', '%', 
		'x', '\x3', '\x2', '\x2', '\x2', '\'', '}', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\a', 'o', '\x2', '\x2', '*', '+', '\a', 'q', '\x2', '\x2', 
		'+', ',', '\a', '\x66', '\x2', '\x2', ',', '-', '\a', 'w', '\x2', '\x2', 
		'-', '.', '\a', 'n', '\x2', '\x2', '.', '/', '\a', 'g', '\x2', '\x2', 
		'/', '\x4', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', 'g', '\x2', 
		'\x2', '\x31', '\x32', '\a', 'p', '\x2', '\x2', '\x32', '\x33', '\a', 
		'\x66', '\x2', '\x2', '\x33', '\x6', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\a', 'n', '\x2', '\x2', '\x35', '\x36', '\a', 'g', '\x2', '\x2', 
		'\x36', '\x37', '\a', 'v', '\x2', '\x2', '\x37', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\a', '?', '\x2', '\x2', '\x39', '\n', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\a', '*', '\x2', '\x2', ';', '\f', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\a', '+', '\x2', '\x2', '=', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '>', '?', '\a', '<', '\x2', '\x2', '?', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\a', '.', '\x2', '\x2', '\x41', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\a', '/', '\x2', '\x2', '\x43', 
		'\x44', '\a', '@', '\x2', '\x2', '\x44', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x45', 'G', '\x5', '%', '\x13', '\x2', '\x46', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 
		'M', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x5', '\'', '\x14', '\x2', 
		'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 
		'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x16', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\a', ',', '\x2', '\x2', 'Q', '\x18', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\a', '\x31', '\x2', '\x2', 'S', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\a', '-', '\x2', '\x2', 'U', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\a', '/', '\x2', '\x2', 'W', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Z', '\x5', '\'', '\x14', '\x2', 'Y', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '\x63', '\x3', 
		'\x2', '\x2', '\x2', ']', '_', '\a', '\x30', '\x2', '\x2', '^', '`', '\x5', 
		'\'', '\x14', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x63', ']', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x64', ' ', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'g', '\t', '\x2', '\x2', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'k', '\b', '\x11', '\x2', '\x2', 'k', '\"', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'm', '\a', '\x31', '\x2', '\x2', 'm', 'n', '\a', '\x31', 
		'\x2', '\x2', 'n', 'r', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\n', '\x3', 
		'\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', 
		'\x2', '\x2', 's', 'u', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\b', '\x12', '\x3', '\x2', 'v', '$', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'y', '\t', '\x4', '\x2', '\x2', 'x', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '&', '\x3', '\x2', 
		'\x2', '\x2', '|', '~', '\t', '\x5', '\x2', '\x2', '}', '|', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'(', '\x3', '\x2', '\x2', '\x2', '\f', '\x2', 'H', 'M', '[', '\x61', '\x63', 
		'h', 'r', 'z', '\x7F', '\x4', '\b', '\x2', '\x2', '\x2', '\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Sane.Grammar
