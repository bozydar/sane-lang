//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/bozydar/workspaces/sane/src/Sane/Sane.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Sane.Grammar {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISaneListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SaneBaseListener : ISaneListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SaneParser.module"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModule([NotNull] SaneParser.ModuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SaneParser.module"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModule([NotNull] SaneParser.ModuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SaneParser.let"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLet([NotNull] SaneParser.LetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SaneParser.let"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLet([NotNull] SaneParser.LetContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SaneParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameter([NotNull] SaneParser.ParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SaneParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameter([NotNull] SaneParser.ParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>pipeExpr</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPipeExpr([NotNull] SaneParser.PipeExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>pipeExpr</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPipeExpr([NotNull] SaneParser.PipeExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>numericAtomExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumericAtomExp([NotNull] SaneParser.NumericAtomExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>numericAtomExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumericAtomExp([NotNull] SaneParser.NumericAtomExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>mulDivExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulDivExp([NotNull] SaneParser.MulDivExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>mulDivExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulDivExp([NotNull] SaneParser.MulDivExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>leftPlusMinus</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLeftPlusMinus([NotNull] SaneParser.LeftPlusMinusContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>leftPlusMinus</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLeftPlusMinus([NotNull] SaneParser.LeftPlusMinusContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrExpr([NotNull] SaneParser.OrExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrExpr([NotNull] SaneParser.OrExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>externalNode</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExternalNode([NotNull] SaneParser.ExternalNodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>externalNode</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExternalNode([NotNull] SaneParser.ExternalNodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>idAtomExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdAtomExp([NotNull] SaneParser.IdAtomExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>idAtomExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdAtomExp([NotNull] SaneParser.IdAtomExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addSubExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddSubExp([NotNull] SaneParser.AddSubExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addSubExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddSubExp([NotNull] SaneParser.AddSubExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>compareExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompareExp([NotNull] SaneParser.CompareExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>compareExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompareExp([NotNull] SaneParser.CompareExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall([NotNull] SaneParser.CallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall([NotNull] SaneParser.CallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpr([NotNull] SaneParser.NotExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpr([NotNull] SaneParser.NotExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringAtomExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringAtomExp([NotNull] SaneParser.StringAtomExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringAtomExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringAtomExp([NotNull] SaneParser.StringAtomExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>composeExpr</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComposeExpr([NotNull] SaneParser.ComposeExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>composeExpr</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComposeExpr([NotNull] SaneParser.ComposeExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>function</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction([NotNull] SaneParser.FunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>function</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction([NotNull] SaneParser.FunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesisExp([NotNull] SaneParser.ParenthesisExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesisExp([NotNull] SaneParser.ParenthesisExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>letsInExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLetsInExp([NotNull] SaneParser.LetsInExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>letsInExp</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLetsInExp([NotNull] SaneParser.LetsInExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndExpr([NotNull] SaneParser.AndExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="SaneParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndExpr([NotNull] SaneParser.AndExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SaneParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclaration([NotNull] SaneParser.DeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SaneParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclaration([NotNull] SaneParser.DeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>commaType</c>
	/// labeled alternative in <see cref="SaneParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCommaType([NotNull] SaneParser.CommaTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>commaType</c>
	/// labeled alternative in <see cref="SaneParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCommaType([NotNull] SaneParser.CommaTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>curryType</c>
	/// labeled alternative in <see cref="SaneParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCurryType([NotNull] SaneParser.CurryTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>curryType</c>
	/// labeled alternative in <see cref="SaneParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCurryType([NotNull] SaneParser.CurryTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisType</c>
	/// labeled alternative in <see cref="SaneParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesisType([NotNull] SaneParser.ParenthesisTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisType</c>
	/// labeled alternative in <see cref="SaneParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesisType([NotNull] SaneParser.ParenthesisTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>idAtomType</c>
	/// labeled alternative in <see cref="SaneParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdAtomType([NotNull] SaneParser.IdAtomTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>idAtomType</c>
	/// labeled alternative in <see cref="SaneParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdAtomType([NotNull] SaneParser.IdAtomTypeContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Sane.Grammar
